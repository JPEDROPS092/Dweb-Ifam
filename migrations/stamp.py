#!/usr/bin/env python3
"""
Script para marcar migra√ß√µes como j√° aplicadas sem execut√°-las.
√ötil para situa√ß√µes onde o banco j√° existe mas o Alembic n√£o est√° ciente.
"""

import sys
import argparse
from pathlib import Path

# Adicionar diret√≥rio do projeto ao path para importa√ß√µes
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from alembic import command
from alembic.config import Config


def stamp_revision(revision='head', sql=False, tag=None):
    """
    Marca uma revis√£o como aplicada sem executar a migra√ß√£o.
    
    Args:
        revision: ID da revis√£o ou 'head' para a mais recente
        sql: Se True, apenas imprime o SQL que seria executado
        tag: Tag opcional para a opera√ß√£o
    """
    # Carregar configura√ß√£o do Alembic
    alembic_cfg = Config(str(Path(__file__).parent / "alembic.ini"))
    
    print(f"üîñ Marcando migra√ß√£o '{revision}' como aplicada...")
    
    # Executar o comando stamp
    command.stamp(alembic_cfg, revision, sql=sql, tag=tag)
    
    print("‚úÖ Migra√ß√£o marcada com sucesso!")


def main():
    """Fun√ß√£o principal"""
    parser = argparse.ArgumentParser(description="Marca migra√ß√µes como aplicadas sem execut√°-las")
    parser.add_argument("revision", nargs="?", default="head", 
                      help="ID da revis√£o ou 'head' para a mais recente (padr√£o)")
    parser.add_argument("--sql", action="store_true", help="Apenas imprimir o SQL (n√£o executar)")
    parser.add_argument("--tag", help="Tag opcional para a opera√ß√£o")
    
    args = parser.parse_args()
    
    stamp_revision(args.revision, args.sql, args.tag)


if __name__ == "__main__":
    main()
