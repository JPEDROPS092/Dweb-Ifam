#!/usr/bin/env python3
"""
üõ°Ô∏è SalasTech Migration Manager
Script para gerenciar migra√ß√µes de banco de dados com Alembic
Vers√£o Python com recursos avan√ßados
"""

import os
import sys
import shutil
import subprocess
import argparse
from datetime import datetime
from pathlib import Path
from typing import Optional, List


class Colors:
    """Cores para output no terminal"""
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    YELLOW = '\033[1;33m'
    BLUE = '\033[0;34m'
    PURPLE = '\033[0;35m'
    CYAN = '\033[0;36m'
    WHITE = '\033[1;37m'
    NC = '\033[0m'  # No Color


class MigrationManager:
    """Gerenciador de migra√ß√µes para SalasTech"""
    
    def __init__(self):
        self.project_root = Path.cwd()
        self.migrations_dir = self.project_root / "migrations"
        self.alembic_ini = self.migrations_dir / "alembic.ini"
        self.db_file = self.project_root / "db.sqlite"
        self.backup_dir = self.project_root / "backups"
        
    def show_header(self):
        """Mostra header do aplicativo"""
        print(f"{Colors.BLUE}üõ°Ô∏è ==============================================={Colors.NC}")
        print(f"{Colors.BLUE}   SalasTech - Migration Manager v2.0 (Python){Colors.NC}")
        print(f"{Colors.BLUE}   Gerenciador de Migra√ß√µes de Banco de Dados{Colors.NC}")
        print(f"{Colors.BLUE}üõ°Ô∏è ==============================================={Colors.NC}")
        print()
    
    def check_dependencies(self):
        """Verifica se as depend√™ncias est√£o instaladas"""
        try:
            import alembic
            print(f"{Colors.GREEN}‚úÖ Alembic encontrado: {alembic.__version__}{Colors.NC}")
        except ImportError:
            print(f"{Colors.RED}‚ùå Alembic n√£o instalado!{Colors.NC}")
            print(f"{Colors.YELLOW}üí° Execute: pip install alembic{Colors.NC}")
            sys.exit(1)
    
    def check_directory(self):
        """Verifica se estamos no diret√≥rio correto"""
        if not self.alembic_ini.exists():
            print(f"{Colors.RED}‚ùå Execute este script da raiz do projeto SalasTech!{Colors.NC}")
            print(f"{Colors.YELLOW}üí° Diret√≥rio atual: {self.project_root}{Colors.NC}")
            print(f"{Colors.YELLOW}üí° Procurando por: {self.alembic_ini}{Colors.NC}")
            sys.exit(1)
        
        print(f"{Colors.GREEN}‚úÖ Diret√≥rio correto encontrado{Colors.NC}")
    
    def backup_database(self) -> Optional[Path]:
        """Faz backup do banco de dados"""
        if not self.db_file.exists():
            print(f"{Colors.YELLOW}‚ö†Ô∏è  Arquivo db.sqlite n√£o encontrado{Colors.NC}")
            return None
        
        self.backup_dir.mkdir(exist_ok=True)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = self.backup_dir / f"db_backup_{timestamp}.sqlite"
        
        try:
            shutil.copy2(self.db_file, backup_file)
            print(f"{Colors.GREEN}‚úÖ Backup criado: {backup_file}{Colors.NC}")
            return backup_file
        except Exception as e:
            print(f"{Colors.RED}‚ùå Erro ao criar backup: {e}{Colors.NC}")
            return None
    
    def run_alembic(self, command: str, args: Optional[List[str]] = None) -> bool:
        """Executa comandos do alembic"""
        if args is None:
            args = []
        
        cmd = ["alembic", "-c", str(self.alembic_ini), command] + args
        print(f"{Colors.BLUE}üîÑ Executando: {' '.join(cmd)}{Colors.NC}")
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=False)
            return result.returncode == 0
        except subprocess.CalledProcessError as e:
            print(f"{Colors.RED}‚ùå Erro ao executar comando: {e}{Colors.NC}")
            return False
        except FileNotFoundError:
            print(f"{Colors.RED}‚ùå Alembic n√£o encontrado no PATH{Colors.NC}")
            return False
    
    def init_alembic(self):
        """Inicializa o Alembic"""
        print(f"{Colors.BLUE}üöÄ Inicializando Alembic...{Colors.NC}")
        
        versions_dir = self.migrations_dir / "versions"
        if versions_dir.exists() and list(versions_dir.glob("*.py")):
            print(f"{Colors.YELLOW}‚ö†Ô∏è  Migra√ß√µes j√° existem!{Colors.NC}")
            response = input("Deseja continuar? (y/N): ").strip().lower()
            if response not in ['y', 'yes']:
                print(f"{Colors.YELLOW}‚ùå Opera√ß√£o cancelada{Colors.NC}")
                return
        
        if self.run_alembic("init", [str(self.migrations_dir)]):
            print(f"{Colors.GREEN}‚úÖ Alembic inicializado!{Colors.NC}")
        else:
            print(f"{Colors.RED}‚ùå Falha ao inicializar Alembic{Colors.NC}")
    
    def create_revision(self, message: str, autogenerate: bool = True):
        """Cria nova migra√ß√£o"""
        print(f"{Colors.BLUE}üìù Criando nova migra√ß√£o...{Colors.NC}")
        
        if not message:
            print(f"{Colors.RED}‚ùå Mensagem da migra√ß√£o √© obrigat√≥ria{Colors.NC}")
            return
        
        self.backup_database()
        
        args = ["--autogenerate"] if autogenerate else []
        args.extend(["-m", message])
        
        if self.run_alembic("revision", args):
            print(f"{Colors.GREEN}‚úÖ Migra√ß√£o criada!{Colors.NC}")
        else:
            print(f"{Colors.RED}‚ùå Falha ao criar migra√ß√£o{Colors.NC}")
    
    def upgrade(self, target: str = "head"):
        """Aplica migra√ß√µes"""
        print(f"{Colors.BLUE}‚¨ÜÔ∏è  Aplicando migra√ß√µes at√©: {target}{Colors.NC}")
        
        self.backup_database()
        
        if self.run_alembic("upgrade", [target]):
            print(f"{Colors.GREEN}‚úÖ Migra√ß√µes aplicadas!{Colors.NC}")
        else:
            print(f"{Colors.RED}‚ùå Falha ao aplicar migra√ß√µes{Colors.NC}")
    
    def downgrade(self, target: str = "-1"):
        """Reverte migra√ß√µes"""
        print(f"{Colors.BLUE}‚¨áÔ∏è  Revertendo migra√ß√µes para: {target}{Colors.NC}")
        
        self.backup_database()
        
        if self.run_alembic("downgrade", [target]):
            print(f"{Colors.GREEN}‚úÖ Migra√ß√µes revertidas!{Colors.NC}")
        else:
            print(f"{Colors.RED}‚ùå Falha ao reverter migra√ß√µes{Colors.NC}")
    
    def show_current(self):
        """Mostra migra√ß√£o atual"""
        print(f"{Colors.BLUE}üìç Migra√ß√£o atual:{Colors.NC}")
        self.run_alembic("current")
    
    def show_history(self):
        """Mostra hist√≥rico de migra√ß√µes"""
        print(f"{Colors.BLUE}üìú Hist√≥rico de migra√ß√µes:{Colors.NC}")
        self.run_alembic("history", ["--verbose"])
    
    def show_status(self):
        """Mostra status das migra√ß√µes"""
        print(f"{Colors.BLUE}üìä Status das migra√ß√µes:{Colors.NC}")
        self.run_alembic("show", ["head"])
        print()
        print(f"{Colors.BLUE}üìç Migra√ß√£o atual:{Colors.NC}")
        self.run_alembic("current")
    
    def reset_database(self):
        """Reset completo do banco"""
        print(f"{Colors.RED}‚ö†Ô∏è  ATEN√á√ÉO: Isso vai resetar TODAS as migra√ß√µes!{Colors.NC}")
        print(f"{Colors.RED}‚ö†Ô∏è  O banco de dados ser√° recriado do zero!{Colors.NC}")
        
        confirm = input("Tem certeza? Digite 'RESET' para confirmar: ").strip()
        if confirm != "RESET":
            print(f"{Colors.YELLOW}‚ùå Reset cancelado{Colors.NC}")
            return
        
        self.backup_database()
        print(f"{Colors.BLUE}üîÑ Fazendo reset completo...{Colors.NC}")
        
        # Downgrade para base
        if self.run_alembic("downgrade", ["base"]):
            # Remove banco
            if self.db_file.exists():
                self.db_file.unlink()
            
            # Upgrade para head
            if self.run_alembic("upgrade", ["head"]):
                print(f"{Colors.GREEN}‚úÖ Reset completo realizado!{Colors.NC}")
            else:
                print(f"{Colors.RED}‚ùå Falha no upgrade ap√≥s reset{Colors.NC}")
        else:
            print(f"{Colors.RED}‚ùå Falha no downgrade{Colors.NC}")
    
    def list_backups(self):
        """Lista backups dispon√≠veis"""
        if not self.backup_dir.exists():
            print(f"{Colors.YELLOW}üìÅ Nenhum backup encontrado{Colors.NC}")
            return
        
        backups = list(self.backup_dir.glob("db_backup_*.sqlite"))
        if not backups:
            print(f"{Colors.YELLOW}üìÅ Nenhum backup encontrado{Colors.NC}")
            return
        
        print(f"{Colors.BLUE}üìÅ Backups dispon√≠veis:{Colors.NC}")
        for backup in sorted(backups, reverse=True):
            size = backup.stat().st_size / 1024  # KB
            mtime = datetime.fromtimestamp(backup.stat().st_mtime)
            print(f"  {Colors.GREEN}‚Ä¢{Colors.NC} {backup.name} ({size:.1f}KB) - {mtime.strftime('%d/%m/%Y %H:%M:%S')}")
    
    def restore_backup(self, backup_name: Optional[str] = None):
        """Restaura backup espec√≠fico"""
        if not backup_name:
            self.list_backups()
            backup_name = input(f"\n{Colors.YELLOW}Digite o nome do backup para restaurar: {Colors.NC}").strip()
        
        backup_file = self.backup_dir / backup_name
        if not backup_file.exists():
            print(f"{Colors.RED}‚ùå Backup n√£o encontrado: {backup_name}{Colors.NC}")
            return
        
        print(f"{Colors.YELLOW}‚ö†Ô∏è  Isso vai sobrescrever o banco atual!{Colors.NC}")
        confirm = input("Continuar? (y/N): ").strip().lower()
        if confirm not in ['y', 'yes']:
            print(f"{Colors.YELLOW}‚ùå Restaura√ß√£o cancelada{Colors.NC}")
            return
        
        try:
            shutil.copy2(backup_file, self.db_file)
            print(f"{Colors.GREEN}‚úÖ Backup restaurado: {backup_name}{Colors.NC}")
        except Exception as e:
            print(f"{Colors.RED}‚ùå Erro ao restaurar backup: {e}{Colors.NC}")


def create_parser():
    """Cria parser de argumentos"""
    parser = argparse.ArgumentParser(
        description="üõ°Ô∏è SalasTech Migration Manager",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=f"""
{Colors.GREEN}Exemplos de uso:{Colors.NC}
  {Colors.BLUE}python migration_manager.py revision -m "Adicionar tabela de logs"{Colors.NC}
  {Colors.BLUE}python migration_manager.py upgrade{Colors.NC}
  {Colors.BLUE}python migration_manager.py downgrade -1{Colors.NC}
  {Colors.BLUE}python migration_manager.py backup{Colors.NC}
  {Colors.BLUE}python migration_manager.py status{Colors.NC}
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Comandos dispon√≠veis')
    
    # Init
    subparsers.add_parser('init', help='Inicializar Alembic (primeira vez)')
    
    # Revision
    revision_parser = subparsers.add_parser('revision', help='Criar nova migra√ß√£o')
    revision_parser.add_argument('-m', '--message', required=True, help='Mensagem da migra√ß√£o')
    revision_parser.add_argument('--no-autogenerate', action='store_true', help='N√£o gerar automaticamente')
    
    # Upgrade
    upgrade_parser = subparsers.add_parser('upgrade', help='Aplicar migra√ß√µes')
    upgrade_parser.add_argument('target', nargs='?', default='head', help='Target da migra√ß√£o (padr√£o: head)')
    
    # Downgrade
    downgrade_parser = subparsers.add_parser('downgrade', help='Reverter migra√ß√µes')
    downgrade_parser.add_argument('target', nargs='?', default='-1', help='Target da migra√ß√£o (padr√£o: -1)')
    
    # Status commands
    subparsers.add_parser('current', help='Mostrar migra√ß√£o atual')
    subparsers.add_parser('history', help='Mostrar hist√≥rico de migra√ß√µes')
    subparsers.add_parser('status', help='Status do banco vs migra√ß√µes')
    
    # Backup commands
    subparsers.add_parser('backup', help='Fazer backup do banco')
    subparsers.add_parser('list-backups', help='Listar backups dispon√≠veis')
    restore_parser = subparsers.add_parser('restore', help='Restaurar backup')
    restore_parser.add_argument('backup_name', nargs='?', help='Nome do backup para restaurar')
    
    # Reset
    subparsers.add_parser('reset', help='Reset completo (CUIDADO!)')
    
    return parser


def main():
    """Fun√ß√£o principal"""
    parser = create_parser()
    args = parser.parse_args()
    
    manager = MigrationManager()
    manager.show_header()
    manager.check_dependencies()
    manager.check_directory()
    
    if not args.command:
        parser.print_help()
        return
    
    command = args.command
    
    if command == 'init':
        manager.init_alembic()
    
    elif command == 'revision':
        autogenerate = not args.no_autogenerate
        manager.create_revision(args.message, autogenerate)
    
    elif command == 'upgrade':
        manager.upgrade(args.target)
    
    elif command == 'downgrade':
        manager.downgrade(args.target)
    
    elif command == 'current':
        manager.show_current()
    
    elif command == 'history':
        manager.show_history()
    
    elif command == 'status':
        manager.show_status()
    
    elif command == 'backup':
        manager.backup_database()
    
    elif command == 'list-backups':
        manager.list_backups()
    
    elif command == 'restore':
        manager.restore_backup(args.backup_name)
    
    elif command == 'reset':
        manager.reset_database()
    
    else:
        print(f"{Colors.RED}‚ùå Comando '{command}' n√£o reconhecido{Colors.NC}")
        parser.print_help()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}‚ùå Opera√ß√£o cancelada pelo usu√°rio{Colors.NC}")
        sys.exit(1)
    except Exception as e:
        print(f"{Colors.RED}‚ùå Erro inesperado: {e}{Colors.NC}")
        sys.exit(1)
